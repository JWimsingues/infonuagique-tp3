heat_template_version: 2014-10-16

description: A template to deploy a load balanced web server

parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    default: JeremyRobinKeys
    constraints:
      - custom_constraint: nova.keypair

  image:
    type: string
    description: Image utilisee pour les serveurs
    default: INF4410-Ubuntu-trusty-mini

  flavor:
    type: string
    description: Flavor utilisee par les serveurs
    default: INF4410-mini

  subnet_id:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: reseau-pour-tous

  sub_subnet:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: sous-reseau-pour-tous
  

resources:
  web_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: OS::Nova::Server
        properties:
          key_name: { get_param: key_name }
          name: my_server_%index%
          image: { get_param: image }
          flavor: { get_param: flavor }
          user_data_format: RAW
          networks:
             - network: { get_param: subnet_id }
          user_data: |
            #!/bin/bash
            echo Telechargement du script ...
            wget https://raw.githubusercontent.com/houssemmh/INF4410-TP3/master/server.py
            echo Lancement du serveur web
            python server.py &

  pool:
    type: OS::Neutron::Pool
    properties:
      name: lb_front_pool
      protocol: HTTP
      subnet: { get_param: sub_subnet }
      lb_method: ROUND_ROBIN
      monitors: [ { get_resource: monitor } ]
      vip:
        name: front_vip
        description: Front-end virtual IP (VIP)
        protocol_port: 8000

  lbalancer:
    type: OS::Neutron::LoadBalancer
    properties:
      members: { get_attr: [web_nodes, refs] }
      pool_id: { get_resource: pool }
      protocol_port: 8000

  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: HTTP
      # Le moniteur d'activité envoie un message à intervalles de 
      # 10 secondes aux machines pour vérifier leur activité
      delay: 10
      # S'il ne reçoit pas de réponse dans un délai de 5 secondes, 
      # il envoie une seconde requête
      timeout: 5
      # S'il ne reçoit pas de réponse à cette seconde requête dans un 
      # autre délai de 5 secondes, il déclare la machine inactive
      max_retries: 2

outputs:
  pool_ip_address:
    value: {get_attr: [pool, vip, address]}
    description: The IP address of the load balancing pool